Description: FridayHITT AWS Cloud Formation Infrastruture Template
#Parameters
Parameters:
  InstanceTypeParam:
    Description: Default value is t2.micro
    Type: String
    Default: t2.micro

  ImageIDParam:
    Description: Default AMI is AMI-1 AWS Linux
    Type: String
    Default: AMI1
    AllowedValues:
      - AMI1 # AWS Linux
      - AMI2 # AWS Ubuntu

  HTTPSPortParam:
    Description: Default value for HTTPS port
    Type: Number
    Default: 443

  HTTPPortParam:
    Description: Default value for HTTP port
    Type: Number
    Default: 8189

  SSHPortParam:
    Description: Default value for SSH port
    Type: Number
    Default: 22

  MariaDBPortParam:
    Description: Default value for MariaDB port
    Type: Number
    Default: 3306

  AvailabilityZoneParam:
    Description: Default value for Availability zone
    Type: String
    Default: us-east-1a

  JumpHostAccessIPParam:
    Description: Default value for Jump Host SSH access IP !And
    Type: String
    Default: 93.107.6.12/32

Mappings:
  RegionMapForAMI:
    us-east-1:
      AMI1: ami-06b21ccaeff8cd686 # AWS Linux
      AMI2: ami-0866a3c8686eaeeba # AWS Ubuntu
    us-west-1:
      AMI1: ami-050cd642fd83388e4 # AWS Linux
      AMI2: ami-0ea3c35c5c3284d82 # AWS Ubuntu

Resources:
  # Create VPC -> HITTVPC and VPC Number, in this case VPC1
  HITTVPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 15.0.0.0/16 # Allocate 65531 usable IPs for this VPC , both Public and Private Subnet including Internet GW (5 IPs reserved by AWS)
      EnableDnsSupport: true # Follow default value
      EnableDnsHostnames: true # Follow default value
      Tags:
        - Key: Name # Tag VPC Name
          Value: HITT-VPC-1 # Value for HITT-VPC-1 for more clear reading

  # Create  Public Subnet HITTPublicSubnet  and Subnet Number, in this case Public Subnet1
  HITTPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HITTVPC1 # Attached to HITTVPC1 
      CidrBlock: 15.0.0.0/23 # Allocate 507 usable IPs for this public subnet (5 IPs reserved by AWS)
      AvailabilityZone: us-east-1a # AZ for subnet US-East(N.Virginia)
      MapPublicIpOnLaunch: true # Automatically assign public IPs to EC2 instances
      Tags:
        - Key: Name # Tag Public Subnet Name
          Value: HITT-VPC1-Public-Subnet-1
    # Value for HITTVPC1-Public-Subnet-1  more clear reading
    #  THERE IS RESERVED ROOM IPS for between Public Subnet and Private Subnet to avoid IPs conflict


    # Create  Private Subnet HITTPublicSubnet  and Subnet Number, in this case Private Subnet1
  HITTPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref HITTVPC1 # Attached to HITTVPC1 
      CidrBlock: 15.0.2.0/23 # Allocate 507 usable IPs for this private subnet (5 IPs reserved by AWS)
      AvailabilityZone: us-east-1a # AZ for subnet US-East(N.Virginia)
      Tags:
        - Key: Name # Tag Private Subnet Name
          Value: HITT-VPC1-Private-Subnet-1 # Tage Value for HITTVPC1-Public-Subnet-1  more clear reading
    # Create Internet Gateway and  Number, in this case HITTInternetGateway1
  HITTInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name # Tag Internet Gateway Name
          Value: HITT-Internet-Gateway # Tage Value for HITT-Internet-Gateway-1  more clear reading
    # Attached HITTInternetGateway1 into HITTVPC1
  HITTAttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref HITTVPC1 # Reference to VPC -> HITTVPC1
      InternetGatewayId: !Ref HITTInternetGateway # Reference to Internet Gateway -> HITTInternetGateway1
    # Create  Public Route Table,
  HITTPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HITTVPC1 # Reference to VPC -> HITTVPC1
      Tags:
        - Key: Name # Tag Public Route Table Name
          Value: HITT-Public-Route-Table # Tag Value for HITT-Public-Route-Table more clear reading
  # Create  Public Route
  HITTPublicRoute:
    Type: AWS::EC2::Route
    #DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref HITTPublicRouteTable #Reference to Public Route Table
      DestinationCidrBlock: 0.0.0.0/0 # Connect to every distination to Internet
      GatewayId: !Ref HITTInternetGateway # Reference to Internet Gateway HITTInternetGateway1

  # Binding Public Subnet  to Public Route Table
  HITTPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref HITTPublicSubnet1 # Binding to Public Subnet 1
      RouteTableId: !Ref HITTPublicRouteTable #Binding to Public Route Table
  # Create Private Route Table,
  HITTPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref HITTVPC1 # Reference to VPC -> HITTVPC1
      Tags:
        - Key: Name # Tag Private Route Table Name
          Value: HITT-Private-Route-Table # Tag Value for HITT-Private-Route-Table more clear reading
  # Binding Private Subnet  to Private Route Table
  HITTPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref HITTPrivateSubnet1 # Binding to Public Subnet 1 for internal communication
      RouteTableId: !Ref HITTPrivateRouteTable #Binding to Public Route Table

  #Security Group for Public Subnet EC2 instances
  PublicSubnetEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound and Outbound Rules for Public Subnet EC2 instances
      VpcId: !Ref HITTVPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref HTTPSPortParam
          ToPort: !Ref HTTPSPortParam
          CidrIp: 0.0.0.0/0 # Inbound rules to allow only HTTPS from internet    
        - IpProtocol: tcp
          FromPort: !Ref HTTPPortParam
          ToPort: !Ref HTTPPortParam
          CidrIp: 0.0.0.0/0 # Inbound rules to allow only HTTP from internet   
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 15.0.0.0/16 # Inbound rules to allow icmp ping test within vpc
        - IpProtocol: tcp
          FromPort: !Ref SSHPortParam
          ToPort: !Ref SSHPortParam
          CidrIp: 54.92.234.115/32 # Inbound rules to allow ssh only from Jump Host
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref HTTPSPortParam
          ToPort: !Ref HTTPSPortParam
          CidrIp: 15.0.0.0/23 # Outbout rule to connect private subnet
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0 # Outbound rules to allow icmp ping for testing internet availability
      Tags:
        - Key: Name
          Value: Public EC2 Instance Security Group

  #Security Group for Private Subnet EC2 instances
  PrivateSubnetEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound and Outbound Rules for Private Subnet EC2 instances
      VpcId: !Ref HITTVPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref HTTPSPortParam
          ToPort: !Ref HTTPSPortParam
          CidrIp: 15.0.0.0/23 # Inbound rules to allow  HTTPS from public subnet
        - IpProtocol: tcp
          FromPort: !Ref HTTPPortParam
          ToPort: !Ref HTTPPortParam
          CidrIp: 15.0.0.0/23 # Inbound rules to allow  HTTP from public subnet
        - IpProtocol: tcp
          FromPort: !Ref SSHPortParam
          ToPort: !Ref SSHPortParam
          CidrIp: 54.92.234.115/32 # Inbound rules to allow  SSH from Jump host
        - IpProtocol: tcp
          FromPort: !Ref MariaDBPortParam
          ToPort: !Ref MariaDBPortParam
          CidrIp: 15.0.0.0/23 # Inbound rules to allow  DB access from public subnet
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 15.0.0.0/23 # Inbound rules to allow icmp ping for testing 
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref HTTPSPortParam
          ToPort: !Ref HTTPSPortParam
          CidrIp: 15.0.0.0/23 #Outbound rule to allow HTTPS for Public Subnet 
        - IpProtocol: tcp
          FromPort: !Ref HTTPPortParam
          ToPort: !Ref HTTPPortParam
          CidrIp: 15.0.0.0/23 # Outbound rules to allow  HTTP from public subnet
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0 # Outbound rules to ensure to test no internet access in private instance
      Tags:
        - Key: Name
          Value: Private EC2 Instance Security Group

  #Security Group for Public Subnet JUMP EC2 instances
  JUMPEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound and Outbound Rules for Public Subnet Jump EC2 instances
      VpcId: !Ref HITTVPC1
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref SSHPortParam
          ToPort: !Ref SSHPortParam
          CidrIp: !Ref JumpHostAccessIPParam # Inbound rules to allow ssh from internet specific IP only
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref SSHPortParam
          ToPort: !Ref SSHPortParam
          CidrIp: 15.0.0.0/16 # Outbound rule to ssh Private and Public Subnet 
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 15.0.0.0/16 # Outbound rules to Public Subnet allow icmp ping for testing 
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0 # Outbound rules to Public Subnet allow icmp ping for internet testing 
      Tags:
        - Key: Name
          Value: Jump Instanc Security Group

  #Public EC2 instance
  PublicSubnetEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeParam
      ImageId: !FindInMap
        - RegionMapForAMI
        - !Ref AWS::Region
        - !Ref ImageIDParam
      KeyName: FridayHITTKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref PublicSubnetEC2SecurityGroup
          SubnetId: !Ref HITTPublicSubnet1
      Tags:
        - Key: Name
          Value: Public EC2 Instance
  #Private EC2 instance
  PrivateSubnetEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeParam
      ImageId: !FindInMap
        - RegionMapForAMI
        - !Ref AWS::Region
        - !Ref ImageIDParam
      KeyName: FridayHITTKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: '0'
          GroupSet:
            - !Ref PrivateSubnetEC2SecurityGroup
          SubnetId: !Ref HITTPrivateSubnet1
      Tags:
        - Key: Name
          Value: Private EC2 Instance
  #Jump EC2 instance
  JumpEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeParam
      ImageId: !FindInMap
        - RegionMapForAMI
        - !Ref AWS::Region
        - !Ref ImageIDParam
      KeyName: FridayHITTKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: '0'
          GroupSet:
            - !Ref JUMPEC2SecurityGroup
          SubnetId: !Ref HITTPublicSubnet1
      Tags:
        - Key: Name
          Value: Jump EC2 Instance
  # Elastic IP's allocation ID for Jump Host
  ElasticIPAssociationforJumpHost:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: eipalloc-05eb57bb45071b3d8
      InstanceId: !Ref JumpEC2

#Output for AWS resources
Outputs:
  VPCID:
    Description: The ID of the VPC
    Value: !Ref HITTVPC1
    Export:
      Name: VPCID

  InternetGatewayID:
    Description: The ID of the Internet Gateway
    Value: !Ref HITTInternetGateway
    Export:
      Name: InternetGatewayID

  PublicSubnetID:
    Description: The ID of the Public Subnet
    Value: !Ref HITTPublicSubnet1
    Export:
      Name: PublicSubnetID

  PrivateSubnetID:
    Description: The ID of the Private Subnet
    Value: !Ref HITTPrivateSubnet1
    Export:
      Name: PrivateSubnetID

  PublicRouteTableID:
    Description: The ID of the Public Route Table
    Value: !Ref HITTPublicRouteTable
    Export:
      Name: PublicRouteTableID

  PrivateRouteTableID:
    Description: The ID of the Private Route Table
    Value: !Ref HITTPrivateRouteTable
    Export:
      Name: PrivateRouteTableID

  PublicRouteID:
    Description: The ID of the Public Route
    Value: !Ref HITTPublicRoute
    Export:
      Name: PublicRouteID

  PublicSubnetSecurityGroupID:
    Description: The ID of the Public Subnet Security Group
    Value: !Ref PublicSubnetEC2SecurityGroup
    Export:
      Name: PublicSubnetSecurityGroupID

  PrivateSubnetSecurityGroupID:
    Description: The ID of the Private Subnet Security Group
    Value: !Ref PrivateSubnetEC2SecurityGroup
    Export:
      Name: PrivateSubnetSecurityGroupID

  JumpHostSecurityGroupID:
    Description: The ID of the Jump Host Security Group
    Value: !Ref JUMPEC2SecurityGroup
    Export:
      Name: JumpHostSecurityGroupID

  PublicSubnetEC2InstanceID:
    Description: The ID of the Public Subnet EC2 instance
    Value: !Ref PublicSubnetEC2
    Export:
      Name: PublicSubnetEC2InstanceID

  PrivateSubnetEC2InstanceID:
    Description: The ID of the Private Subnet EC2 instance
    Value: !Ref PrivateSubnetEC2
    Export:
      Name: PrivateSubnetEC2InstanceID

  JumpHostEC2InstanceID:
    Description: The ID of the Jump Host EC2 instance
    Value: !Ref JumpEC2
    Export:
      Name: JumpHostEC2InstanceID